<?php

namespace B2bBundle\Repository;

/**
 * ShopRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ShopRepository extends \Doctrine\ORM\EntityRepository {

    // TODO : use brand as filter ?
    public function searchForBrand($text, $brand) {
        $QueryBuilder = $this->createQueryBuilder('s')
            ->innerJoin('s.customer', 'c')
            ->innerJoin('c.brand', 'b')
            ->where('b.id LIKE :brandId AND (s.name LIKE :text OR c.companyName LIKE :text OR c.id LIKE :text)')
            // TODO : has access ?
            ->setParameters(array('brandId' => '%'.$brand->getId().'%','text' => '%'.$text.'%'));
        return $QueryBuilder->getQuery()->getResult();
    }

    public function findForBrand($brand) {
        $QueryBuilder = $this->_em->createQueryBuilder()
            ->from('B2bBundle:Shop', 'shop')
            ->innerJoin('shop.customer', 'c')
            ->innerJoin('c.accesses', 'a')
            //->leftJoin('B2bBundle:Command', 'command', 'WITH', 'command.shop = shop')
            //->leftJoin('B2bBundle:CartCollection', 'cartCollection', 'WITH', 'cartCollection = command.cartCollection')
            ->select('shop')
            //->addSelect('command')
            ->where('a.allowed = true AND a.brand = :brand_id')
            //->andWhere('(cartCollection IS NOT NULL AND cartCollection.brand = :brand_id)')
            ->setParameters(array('brand_id' => $brand));
        return $QueryBuilder->getQuery()->getResult();
    }

    public function searchNearestForBrand($brand, $customer) {
        return $this->_em->createQueryBuilder()
            ->from('B2bBundle:Shop', 'shop')
            ->innerJoin('B2bBundle:Customer', 'customer', 'WITH', 'customer <> :customer_id')
            ->innerJoin('B2bBundle:CartCollection', 'cart', 'WITH', 'customer = cart.customer')
            ->innerJoin('B2bBundle:Command', 'c', 'WITH', 'c.cartCollection = cart')

            //->from('B2bBundle:Command', 'c')
            /*->innerJoin('c.cartCollection', 'cart')
            ->innerJoin('cart.customer', 'customer')
            ->innerJoin('customer.shops', 's')*/
            ->select('shop')
            ->where(':brand_id = cart.brand')
            //->andWhere(':customer_id <> customer')
            ->andWhere('shop MEMBER OF customer.shops')
            //->andWhere('customer = cart.customer')
            //->andWhere('c.cartCollection = cart')
            ->setParameters(array('brand_id' => $brand, 'customer_id' => $customer))
            ->distinct()
            ->getQuery()
            ->getResult();

        /*$QueryBuilder = $this->createQueryBuilder('s')
            ->where(':customer_id NOT MEMBER OF s.customers AND ')
            ->setParameters(array('brand_id' => $brand, 'customer_id' => $customer));
        return $QueryBuilder->getQuery()->getResult();*/
    }

    public function searchForSalesman($text, $salesman) {
        $QueryBuilder = $this->createQueryBuilder('s')
            ->innerJoin('s.customer', 'c')
            ->innerJoin('s.salesmen', 'salesmanshop')
            ->where('s.name LIKE :text OR c.companyName LIKE :text OR c.id LIKE :text')
            ->andWhere(':salesman_id = salesmanshop.salesman')
            ->setParameters(array('text' => '%'.$text.'%', 'salesman_id' => $salesman));
        return $QueryBuilder->getQuery()->getResult();
    }

    public function getShops($salesman, $brand) {
        $QueryBuilder = $this->createQueryBuilder('s')
            ->innerJoin('s.salesmen', 'salesmanshop')
            ->innerJoin('s.customer', 'c')
            ->where('salesmanshop.salesman = :salesman_id')
            ->andWhere('salesmanshop.brand = :brand_id')
            ->orderBy('c.companyName')
            ->setParameters(array('salesman_id' => $salesman, 'brand_id' => $brand));
        return $QueryBuilder->getQuery()->getResult();
    }

    public function queryIn($ids) {
        $QueryBuilder = $this->createQueryBuilder('s')
            ->where('s.id IN (:ids)')
            ->setParameters(array('ids' => $ids));
        return $QueryBuilder;
    }
}
