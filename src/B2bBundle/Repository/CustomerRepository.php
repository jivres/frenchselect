<?php

namespace B2bBundle\Repository;
use Doctrine\ORM\EntityRepository;

/**
 * CustomerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CustomerRepository extends EntityRepository {
    public function searchCustomer($text) {
        $QueryBuilder = $this->createQueryBuilder('c')
            ->innerJoin('c.shops', 's')
            ->where('c.companyName LIKE :text')
            ->orWhere('c.id LIKE :text')
            ->orWhere('s.name LIKE :text')
            ->orWhere('c.billingTown LIKE :text')
            ->orWhere('s.town LIKE :text')
            //->andWhere('c.isActive = True')
            ->setParameters(array('text' => '%'.$text.'%'));
        return $QueryBuilder->getQuery()->getResult();
    }

    public function findCustomers($brand, $departments, $categories) {
        $QueryBuilder = $this->createQueryBuilder('c')
            ->innerJoin('c.shops', 's');
        if ($brand != null) {
            // TODO : travaille avec la marque
        }

        if (count($departments) > 0 and count($categories) > 0) {
            $QueryBuilder
                ->innerJoin('s.categories', 'cat')
                ->where('SUBSTRING(s.zipCode, 1, 2) IN (:departements)')
                ->andWhere('cat IN (:categories)')
                ->setParameters(array('departements' => $departments, 'categories' => $categories));
        } else {
            if (count($departments) > 0) {
                $QueryBuilder
                    ->where('SUBSTRING(s.zipCode, 1, 2) IN (:departements)')
                    ->setParameter('departements', $departments);
            }

            if (count($categories) > 0) {
                $QueryBuilder
                    ->innerJoin('s.categories', 'cat')
                    ->where('cat IN (:categories)')
                    ->setParameter('categories', $categories);
            }
        }

        return $QueryBuilder->getQuery()->getResult();
    }
}
