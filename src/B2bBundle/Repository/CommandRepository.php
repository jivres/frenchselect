<?php

namespace B2bBundle\Repository;
use B2bBundle\Entity\Command;

/**
 * CommandRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CommandRepository extends \Doctrine\ORM\EntityRepository {

    public function findForCartCollection($cartCollection) {
        $QueryBuilder = $this->createQueryBuilder('c')
            ->where('c.cartCollection = :cart_collection_id')
            ->setParameters(array('cart_collection_id' => $cartCollection))
            ->orderBy('c.date', 'DESC');
        return $QueryBuilder->getQuery()->getResult();
    }

    public function findForCustomer($customer) {
        $QueryBuilder = $this->createQueryBuilder('c')
            ->innerJoin('c.cartCollection', 'r')
            ->where('r.customer = :customer_id')
            ->setParameters(array('customer_id' => $customer))
            ->orderBy('c.date', 'DESC');
        return $QueryBuilder->getQuery()->getResult();
    }

    public function findForShop($shop) {
        $QueryBuilder = $this->createQueryBuilder('c')
            ->Where('c.shop = :shop_id')
            ->setParameters(array('shop_id' => $shop));
        return $QueryBuilder->getQuery()->getResult();
    }

    /**
     * @param $shop
     * @param $brand
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findLatestForShop($shop, $brand) {
        $QueryBuilder = $this->createQueryBuilder('c')
            ->innerJoin('c.cartCollection', 'r')
            ->where('r.brand = :brand_id')
            ->andWhere('c.shop = :shop_id')
            ->setParameters(array('shop_id' => $shop, 'brand_id' => $brand))
            ->orderBy('c.date', 'DESC')
            ->setMaxResults(1);
        return $QueryBuilder->getQuery()->getOneOrNullResult();
    }

    public function findCommands($brand) {
        $QueryBuilder = $this->createQueryBuilder('com')
            ->innerJoin('com.cartCollection', 'cartCollection')
            ->where('cartCollection.brand = :brand_id')
            ->andWhere('com.status <> \'created\'')
            ->setParameters(array('brand_id' => $brand))
            ->orderBy('com.date', 'DESC');
        return $QueryBuilder->getQuery()->getResult();
    }

    public function findCommandsByDate($brand, $from, $to) {
        $QueryBuilder = $this->createQueryBuilder('com')
            ->innerJoin('com.cartCollection', 'cartCollection')
            ->where('cartCollection.brand = :brand_id')
            ->andWhere('com.date BETWEEN :from AND :to')
            ->setParameters(array(
                'brand_id' => $brand,
                'from' => $from,
                'to' => $to
            ))
            ->orderBy('com.date', 'DESC');
        return $QueryBuilder->getQuery()->getResult();
    }

    public function findWaitingCommands($brand) {
        $QueryBuilder = $this->createQueryBuilder('com')
            ->innerJoin('com.cartCollection', 'cartCollection')
            ->where('cartCollection.brand = :brand_id')
            ->andWhere('com.status = \'not-validated\'')
            ->setParameters(array('brand_id' => $brand))
            ->orderBy('com.date', 'DESC');
        return $QueryBuilder->getQuery()->getResult();
    }

    // TODO : rajouter une condition pour que la commande ne soit pas payÃ©e
    public function searchNotPaidForCustomer($customer) {
        $QueryBuilder = $this->createQueryBuilder('c')
            ->innerJoin('c.cartCollection', 'r')
            ->where('r.customer = :customer_id')
            ->setParameters(array('customer_id' => $customer));
        return $QueryBuilder->getQuery()->getResult();
    }

    public function searchValidatedForCustomer($customer, $text) {
        $QueryBuilder = $this->createQueryBuilder('c')
            ->innerJoin('c.cartCollection', 'r')
            ->innerJoin('r.brand', 'b')
            ->where('r.customer = :customer_id')
            ->andWhere('c.status = :status')
            ->andWhere('c.id LIKE :text OR b.name LIKE :text OR b.brandName LIKE :text')
            ->setParameters(array('customer_id' => $customer,
                'status' => Command::STATUS_VALIDATED,
                'text' => '%'.$text.'%'));
        return $QueryBuilder->getQuery()->getResult();
    }

    public function statistics($brand, $from, $to) {
        $QueryBuilder = $this->createQueryBuilder('c')
            ->innerJoin('c.cartCollection', 'r')
            ->where(':brand_id IS NULL OR r.brand = :brand_id')
            ->andWhere(':from IS NULL OR c.date >= :from')
            ->andWhere(':to IS NULL OR c.date <= :to')
            ->andWhere('c.status = :status')
            ->setParameters(array('brand_id' => $brand, 'from' => $from, 'to' => $to, 'status' => 'validated'));
        return $QueryBuilder->getQuery()->getResult();
    }
}
