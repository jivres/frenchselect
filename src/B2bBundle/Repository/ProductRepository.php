<?php

namespace B2bBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends EntityRepository
{

    public function getForCollection($collection, $cible)
    {
        $cibleExpression = null;
        if($cible){
            $cibleExpression = 'p.target = '.$cible->getId();
        }

        $QueryBuilder = $this->_em->createQueryBuilder()
            ->from('B2bBundle:Product', 'p')
            ->innerJoin('p.availabilities', 'availability')
            ->innerJoin('availability.sizeQuantities', 'sizeQuantity')
            ->select('p as product')
            ->Where('p.collection = :collection')
            ->andWhere($cibleExpression)
            ->groupBy('p')
            ->setParameters(array('collection' => $collection));
        return (new Paginator($QueryBuilder))->getIterator()->getArrayCopy();
    }

    public function search($text, $collection, $primaryCategories = null, $targets = null, $sizes = null, $colors = null, $reduction = false, $favourite = false)
    {
        $primaryCategoriesExpression = null;
        $targetsExpression = null;
        $sizesExpression = null;
        $colorExpression = null;
        $reductionExpression = null;
        $favouriteExpression = null;
        if ($primaryCategories) {
            $primaryCategoriesExpression = 'p.primaryCat = '.$primaryCategories[0];
            for ($i = 1; $i < count($primaryCategories); $i++) {
                $primaryCategoriesExpression = $primaryCategoriesExpression .' OR p.primaryCat ='. $primaryCategories[$i];
            }
        }
        if ($targets) {
            $targetsExpression = 'p.target = '.$targets[0];
            for ($i = 1; $i < count($targets); $i++) {
                $targetsExpression = $targetsExpression .' OR p.target ='. $targets[$i];
            }
        }
        if ($sizes) {
            $sizesExpression = 'sizeQuantity.size = '.$sizes[0];
            for ($i = 1; $i < count($sizes); $i++) {
                $sizesExpression = $sizesExpression .' OR sizeQuantity.size ='. $sizes[$i];
            }
        }
        if ($colors) {
            $colorExpression = 'colorProduct.color = '.$colors[0];
            for ($i = 1; $i < count($colors); $i++) {
                $colorExpression = $colorExpression .' OR colorProduct.color ='. $colors[$i];
            }
        }
        if($reduction){
            $reductionExpression = 'allowedColor.reduction != 0 AND allowedColor.reduction IS NOT NULL';
        }
        if($favourite){
            $favouriteExpression = 'allowedColor.favourite = 1';
        }
        $QueryBuilder = $this->_em->createQueryBuilder()
            ->from('B2bBundle:Product', 'p')
            ->innerJoin('p.availabilities', 'availability')
            ->innerJoin('availability.sizeQuantities', 'sizeQuantity')
            ->innerJoin('p.allowedColors', 'allowedColor')
            ->innerJoin('allowedColor.color', 'colorProduct')
            ->select('p as product')
            ->addSelect('sizeQuantity.amount as quantity')
            ->where('p.refModel LIKE :text OR p.name LIKE :text OR p.tertiaryCategory LIKE :text')
            ->andWhere('p.collection = :collection')
            ->andWhere($primaryCategoriesExpression)
            ->andWhere($targetsExpression)
            ->andWhere($sizesExpression)
            ->andWhere($colorExpression)
            ->andWhere($reductionExpression)
            ->andWhere($favouriteExpression)
            ->orderBy('p.name')
            ->setParameters(array('text' => '%' . $text . '%', 'collection' => $collection));
        return (new Paginator($QueryBuilder))->getIterator()->getArrayCopy();
    }

    public function bestSellers($brand, $from, $to)
    {
        $QueryBuilder = //$this->createQueryBuilder('p')
            $this->_em->createQueryBuilder()
                ->from('B2bBundle:Product', 'p')
                ->innerJoin('p.collection', 'c')
                ->innerJoin('c.brand', 'b')
                ->innerJoin('B2bBundle:CartCollection', 'cartCollection', 'WITH', 'c = cartCollection.collection')
                ->innerJoin('B2bBundle:Command', 'command', 'WITH', 'command.cartCollection = cartCollection')
                ->innerJoin('cartCollection.cartCategories', 'cartCategory')
                ->innerJoin('cartCategory.cartRows', 'cartRows')
                ->innerJoin('cartRows.sizeQuantities', 'sizeQuantity')
                ->where(':brand IS NULL OR b = :brand')
                ->andWhere('cartCollection.cart.id IS NULL')
                ->andWhere('cartRows.product = p')
                ->andWhere(':from IS NULL OR command.date >= :from')
                ->andWhere(':to IS NULL OR command.date <= :to')
                ->select('p')
                ->addSelect('SUM(sizeQuantity.amount) as sum')
                ->groupBy('cartRows.product')
                ->orderBy('sum', 'DESC')
                ->setMaxResults(10)
                ->setParameters(array('brand' => $brand, 'from' => $from, 'to' => $to));
        return (new Paginator($QueryBuilder))->getIterator()->getArrayCopy();
    }

    /**
     * @param null $brand
     * @param null $from
     * @param null $to
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function countSold($brand = null, $from = null, $to = null)
    {
        $QueryBuilder = //$this->createQueryBuilder('p')
            $this->_em->createQueryBuilder()
                ->from('B2bBundle:Product', 'p')
                ->join('p.collection', 'c')
                ->innerJoin('B2bBundle:CartCollection', 'cartCollection', 'WITH', 'c = cartCollection.collection')
                ->innerJoin('B2bBundle:Command', 'command', 'WITH', 'command.cartCollection = cartCollection')
                ->join('cartCollection.cartCategories', 'cartCategory')
                ->join('cartCategory.cartRows', 'cartRow')
                ->join('cartRow.sizeQuantities', 'sizeQuantity')
                ->select('COALESCE(SUM(sizeQuantity.amount), 0)')
                //->andWhere('cartCollection.cart IS NULL')
                ->where('cartRow.product = p')
                ->andWhere('command.status = :status')
                ->andWhere(':brand_id IS NULL OR c.brand = :brand_id')
                ->andWhere(':from IS NULL OR command.date >= :from')
                ->andWhere(':to IS NULL OR command.date <= :to')
                ->setParameters(array('brand_id' => $brand, 'from' => $from, 'to' => $to, 'status' => 'validated'));;
        return $QueryBuilder->getQuery()->getOneOrNullResult()[1];
    }
}
